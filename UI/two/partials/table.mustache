
<link rel="stylesheet" href="assets/handsontable.full.css">
<style>

  #table .ui-content{
    overflow: scroll
  }

  .handsontable table {
    font-size: 0.8em;
  }
  .handsontable th {
    white-space: normal !important;*/
    word-wrap: break-word;
    vertical-align: middle;
  }

  input[type="checkbox"] {
      display:none;
  }
  input[type="checkbox"] + label {
      font-family: sans-serif;
      font-size: 0.8em
  }
  input[type="checkbox"] + label span {
      display:inline-block;
      width:19px;
      height:19px;
      margin:-2px 2px 0 20px;
      vertical-align:middle;
      background:url(check_sheet.png) left top no-repeat;
      cursor:pointer;
      transform: scale(1.1,1.1);
  }
  input[type="checkbox"]:checked + label span {
      background:url(check_sheet.png) -19px top no-repeat;
  }

  #exampleConsole {
      margin-left: 20px;
      color: green;
  }

  .greyfont {
    color: lightgrey !important
  }

  #loadData {
    max-width: 33vw;
    background-color: rgba(225,225,255,1);
    white-space: normal;
    /*display: none*/
  }

  .tablebutton {
    font-size: 1.5vh;
    height: 5em;
  }

  #saveData {
    max-width: 33vw;
    background-color: rgba(255,205,205,1);
    white-space: normal;
    text-shadow: none
  }

  #autosave {
    max-width: 20vw;
    text-shadow: none
  }

  .invisible {
    opacity: 0;
    pointer-events: none;
  }

  .buttonrow {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  #tablemain .ui-checkbox .ui-btn{
    /*height: 100%;*/
    white-space: nowrap;
  }

  @media screen and (min-width:1092px)
  {
    .tablebutton {
      height: 2.5em
    }

    #tablemain .ui-checkbox .ui-btn{
      height: 0.7em;
    }



  }


</style>

<div data-role="page" id="table">

  <!-- HEADER TEMPLATE -->
  {{>header}}
  <!-- END HEADER -->

  <!-- CONTENT -->
  <div role="main" class="ui-content" id="tablemain">

    <div class="buttonrow">
      <button id="loadData" class="tablebutton">load data from server</button>
      <button id="saveData" class="tablebutton">save data to server</button>
      <input type="checkbox" id="autosave" class="tablebutton"/>
      <label for="autosave"><span></span>autosave on</label>
      <span id="exampleConsole"></span>
    </div>

    <br>
    <div id="example"></div>

  </div>
  <!-- END CONTENT -->

</div>

<script src="assets/handsontable.full.js" type="text/javascript"></script>
<script src="assets/xlsx.full.min.js" type="text/javascript"></script>
<!--needed for xlsx dl-->
<script src="assets/FileSaver.min.js" type="text/javascript"></script>
<script src="assets/dotize.js" type="text/javascript"></script>

<script>

  let table = {
  }

  let dataObject = [];
  let hot = hot_init();


  $( document ).on("pageshow", "#table", function(e,ui) {
    if (dataObject.length <= 1)
    {
      loadAllItems().then(function(res){
        console.log(res);
        filltable(res,true);
      })
    }
    else {
      hot = hot_init()
    }

  })

  $( window ).resize(function() {
    hot = hot_init()
  });

  document.getElementById("loadData").addEventListener("click",function(){
    loadAllItems().then(function(res){
      console.log(res);
      filltable(res,true);
    })
  })

  $("#autosave").change(function(){
    if ($('#autosave:checkbox:checked').length > 0)
    {
      swal({
        html:`Vorsicht!<br><br> Ab jetzt wird jede Ã„nderung in der Tabelle
        sofort hochgeladen.<br> Da machst du schnell was kaputt. Mach vorsichtig!`
      })
    }
  })

  $("#saveData").click(function(){

    $(exampleConsole).removeClass("greyfont")
    exampleConsole.innerText ='saving all items to database....';

    $("#saveData").addClass("invisible")

    saveAllItems()
    .then(function(){

      $(exampleConsole).addClass("greyfont")
      exampleConsole.innerText ='all up to date';
      console.log("items saved");
      console.log("reloading table");

      loadAllItems()
      .then(function(res){

        filltable(res);
        $("#saveData").removeClass("invisible")

      })
    })

  })


  /**
  */
  function loadAllItems(){

      console.log("loading all items");
      return new Promise(function(resolve, reject) {

        $.ajax({
          type: "GET",
          url: API_BASE_URL + glb_username+"/_all_docs",
          xhrFields: { withCredentials: true }, // to make AuthCookie ok
          success: function(r){
            promiseArray = [];
            if (r.rows)
            {
              r.rows.forEach(function(row){
                //console.log(row);
                if (row.id && !row.id.includes("-containerOf")
                    && !row.id.includes("&") && !row.id.includes("_design"))
                {
                    promiseArray.push(new Promise(
                        function(reso,reje){
                          getSingleItem(row.id,function(item){reso(item)})
                        }
                      )
                    )
                }

              })
              resolve(Promise.all(promiseArray))
            }
          },
          error: function(err){reject(err)},
          contentType:"application/json"
        });

      });
  }

  /**
  returns promise that resolves after all DB updates have been processed
  */
  function saveAllItems(){ // continue here

        console.log("saving!");

        let promiseArray = [];

        for (i in dataObject)
        {
          let promise = new Promise(function(reso,reje) {
            if (dataObject[i]._id && dataObject[i]._id !== "")
            {
              let j = i; // scope shizzle
              let item = JSON.parse(JSON.stringify(dataObject[j]))
              setTimeout(function(){
                item = convertItemToItemWithArrays(item);
                updateOverwrite(item,function(res){
                  console.log(res);
                  console.log(j);
                  if (res.ok)
                  {
                    dataObject[j]._rev = res.rev
                  }
                  reso(res)
                },function(res){ // in case we have an conflict error, try again once in a second:
                  /*
                  FIXME: This is NOT an optiomal solution. But we will stick with it
                  until we have a state machine option build into dingsdas API at server.js
                  */

                  if(res.status && res.status.toString().startsWith("409")) { console.log("conflict"); }
                  else if(res.status &&  res.status.toString().startsWith("500")) { console.log("server error"); }
                  else if(res.status && res.status.toString().startsWith("4")) { console.log("other error"); }

                  setTimeout(
                    function(){
                      updateOverwrite(item,function(res){
                          console.log(res);
                          console.log(j);
                          if (res.ok)
                          {
                            dataObject[j]._rev = res.rev
                          }
                          reso(res)
                        },
                        function(err){
                          if(err.status && err.status.toString().startsWith("409")) { console.log("conflict"); }
                          else if(err.status && err.status.toString().startsWith("500")) { console.log("server error"); }
                          else if(err.status && err.status.toString().startsWith("4")) { console.log("other error"); }
                          alert("item with _id: "+item._id+"\n("+item.name+")\ncould not be updated.");
                          console.log(res);
                          reje("err")
                        }
                        )
                  }
                    ,1000)
                });
              },0)
            }
            else if (dataObject[i].name && dataObject[i].location !== undefined)
            {
              dataObject[i] = addOwners2DocIfNoOwners(dataObject[i]);
              addNewItemFromTable(dataObject[i],i,function(){ reso("aha") })
            }
            else {
              reso("nothing")
            }
          }) // micro promises
        promiseArray.push(promise)
        } // end for loop

      console.log(promiseArray);
      return new Promise(function(resolve, reject) {

        Promise.all(promiseArray)
          .then(()=>{resolve("done")})
          .catch((err) => {reject("could not finish saveAllItems()")})

      }) // end main promise

  }


    function hot_init() {
      let container = document.getElementById('example');
      return new Handsontable(container, {
        /*beforeRender*/
        beforeInit: function(){
          console.log("init hot");
            for (doc of dataObject)
            {
              if (!doc.owners){return}
              delete doc._attachments;
              doc.owners = doc.owners.toString();
              if (doc.other && doc.other.tags){
                doc.other.tags = doc.other.tags.toString();
              }
              //doc.other.visibility = doc.other.visibility.toString();
            }
        },
        data: dataObject,
        height:function(){
          let screenheight = window.innerHeight
            || document.documentElement.clientHeight
            || document.body.clientHeight;
          let size = screenheight*0.65;
          if(!isOnMobile()){
            //console.log("!!!!! DESKTOP !!!!!!");
            size = screenheight*0.75;
          }
          //console.log(size);
          return size
        },
        columns: [{
                    data: "_id",
                    width: 50,
                    wordWrap:false
                  }, {
                    data: "name",
                  }, {
                    data: "other.description",
                    width: 200,
                  }, {
                    data: "other.count",
                    width: 60
                  }, {
                    data: "other.weight",
                    width: 60
                  }, {
                    data: "other.value",
                    width: 60
                  },{
                    data: "other.tags",
                    width: 120
                  },{
                    data: "location.description",
                    width: 80,
                    wordWrap:false
                  }, {
                    data: "location.address",
                    width: 200,
                    wordWrap:false
                  }, {
                    data: "location.latitude",
                    width: 50,
                    wordWrap:false
                  }, {
                    data: "location.longitude",
                    width: 50,
                    wordWrap:false
                  },{
                    data: "location.insideOf",
                    wordWrap:false,
                    width: 120
                  }, {
                    data: "other.madein",
                    width: 60
                  }],
        colHeaders: ["ID","Name","Description","Number of pieces","Weight","Price",
          "tags / keywords","Location .description","Location .address",
          "Location .latitude","Location .longitude","InsideOf item with ID",
          "Country of origin"],
        rowHeaders: true,
        minSpareRows: 1,
        autoWrapRow: true,
        manualRowResize: true,
        manualColumnResize: true,
        contextMenu:{
          items:{
            "export_carnet_csv": { // Own custom option
              name: 'export as Carnet.csv',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {
                  console.log(hot.getSelected()); // Fire alert after menu close (with timeout)
                  // here get all selected rows._id s and then build carnet from it
                  let carnetArrayNumbered = getCarnetFromRows(hot.getSelected())
                  renderCarnetATAcsv(carnetArrayNumbered); //works
                }, 0);
              }
            },
            "export_carnet_xls": { // Own custom option
              name: 'export as Carnet.xls',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {
                  console.log(hot.getSelected()); // Fire alert after menu close (with timeout)
                  // here get all selected rows._id s and then build carnet from it
                  let carnetArrayNumbered = getCarnetFromRows(hot.getSelected())
                  renderCarnetATAexcel(carnetArrayNumbered); //DOES IT WORK???
                }, 0);
              }
            },
            "export_carnet_pdf": { // Own custom option
              name: 'export as Carnet.pdf',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {
                  console.log(hot.getSelected()); // Fire alert after menu close (with timeout)
                  // here get all selected rows._id s and then build carnet from it
                  let carnetArrayNumbered = getCarnetFromRows(hot.getSelected())
                  renderCarnetATApdf(carnetArrayNumbered) // works
                }, 0);
              }
            },
            "sep1": {name: '---------'},
            "export_verwendungsnachweis_csv": { // Own custom option
              name: 'export as Verwendungsnachweis.csv',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {
                  console.log(hot.getSelected()); // Fire alert after menu close (with timeout)
                  let array = getVerwendungsNachweisArray(hot.getSelected());
                  for (i in array)
                  {
                    array[i]=Object.values(array[i])
                    console.log(array[i]);
                  }
                  console.log(array);
                  renderCSV(["Datum","BelegNr","EmpfÃ¤nger*in/Einzahler*in",
                    "Warenbezeichnung inkl. Seriennummer","Einkaufspreis EUR",],
                    array,"Verwendungsnachweis.csv",true)
                }, 0);
              }
            },
            "export_verwendungsnachweis_xls": { // Own custom option
              name: 'export as Verwendungsnachweis.xls',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {
                  console.log(hot.getSelected()); // Fire alert after menu close (with timeout)
                  let array = getVerwendungsNachweisArray(hot.getSelected());
                  for (i in array)
                  {
                    array[i]=Object.values(array[i])
                    console.log(array[i]);
                  }
                  console.log(objToArray(array));
                  array = objToArray(array);
                  array.unshift(["Datum","BelegNr","EmpfÃ¤nger*in/Einzahler*in",
                    "Warenbezeichnung inkl. Seriennummer","Einkaufspreis EUR",])
                  renderAndDownloadExcel(array,[10,7,10,40,10])
                }, 0);
              }
            },
            "sep2": {name: '---------'},
            "export_table_xls": { // Own custom option       // CONTINUE HERE !!!!!!!!!!!!!!!!!!!
              name: 'export complete table as xls',
              callback: function(inp,test) { // Callback for specific option
                setTimeout(function() {

                  console.log(hot.getSourceData());
                  let array = JSON.parse(JSON.stringify(hot.getSourceData()));
                  for (i in array)
                  {
                    array[i]=dotize.convert(array[i])
                    console.log(array[i]);
                  }
                  //console.log(objToArray(array,true));
                  array = objToArray(array,true); // make into array of arrays
                  console.log(array);
                  renderAndDownloadExcel(array,[1,1,30,10,10,10,10,10,10,10,30,10,10,10,10])
                }, 0);
              }
            },
            "sep22":{name: '---------'},
            "row_above":{},
            "row_below":{},
            "remove_row":{},
            "sep3": {name: '---------'},
            "alignment":{},
            "make_read_only":{},
          }
        },
        cells: function (row, col, prop)
        {
          let cellProperties = {}

          if ( ["_id","id","containerOf","hyperlink"].includes(prop) )
          {
            cellProperties.readOnly = true;
          }
          return cellProperties;
        },
        afterChange: function (change, source) {
          let autosave = document.getElementById("autosave");
          let exampleConsole = document.getElementById("exampleConsole");
          if (source === 'loadData') {
            return; //don't save this change
          }
          if (!autosave.checked) {
            return;
          }
          // timeouts purely cosmetic...
          clearTimeout(autosaveNotification);
          var autosaveNotification = setTimeout(function() {
                $(exampleConsole).removeClass("greyfont")
                exampleConsole.innerText ='Changes will be autosaved...';
                console.log("Changes will be autosaved");
                saveChangesToServer(change)
                .then(function(){
                  setTimeout(function(){
                    $(exampleConsole).addClass("greyfont")
                    exampleConsole.innerText ='all up to date';
                  },500)
                })
              }, 100);
        },
        beforeRemoveRow: function(start,count){
          console.log(start);
          console.log(count);
          // get items:
          let items = [];
          for (let i=start; i < start+count; i++)
          {
            items.push(dataObject[i])
          }
          console.log(items);

          swal({
              title:"DELETE ROW(S)?",
              html:`Willst du die gerade entfernte(n)
                items auch auf dem Server lÃ¶schen?`,
                showCancelButton: true,
                focusConfirm: false,

          }).then((result) => {
            if (result.value) {
              // TO DO: delete ITEMS via dingsda API!!!
              for (var i = 0; i < items.length; i++) {
                removeit(items[i]._id)
              }
              Swal(
                'Deleted!',
                'items wurden gelÃ¶scht.',
                'success'
              )
            }
          })
        }

      });
    }

    /**
    */
    function getAllMarkedRows(chosen)
    {
      let data = []
      for (var i in chosen)
      {
        let rows = chosen[i];
        rows = [rows[0],rows[2]];
        rows.sort(function(a, b){return a-b}); // sort array
        //console.log(rows);
        for (var j = rows[0]; j <= rows[1]; j++)
        {
          //console.log(dataObject[j]._id);
          addToArrayIfNotExist(data,j)
        }
      }
      console.log(data);
      return data
    }

    /**
    */
    function getVerwendungsNachweisArray(chosen)
    {
      let rows = getAllMarkedRows(chosen)

      let nachweisArray = []
      // prepare data for Carnet export:
      for (i of rows)
      {
        // default rimini to exist as emtpy object if undefined:
        dataObject[i].other.rimini = dataObject[i].other.rimini || {};
        console.log(dataObject[i]);
        let item = {}
        Object.assign(item, {
          receiptDate:dataObject[i].other.rimini.receiptDate,
          receiptNo:dataObject[i].other.rimini.receiptNo,
          boughtAt:dataObject[i].other.rimini.boughtAt,
          description : dataObject[i].name,
          price: dataObject[i].other.rimini.priceNew,
        });
        if (item.receiptDate === undefined){ item.receiptDate = "";}
        if (item.receiptNo === undefined){ item.receiptNo = "";}
        if (item.boughtAt === undefined){ item.boughtAt = "";}
        if (item.description === undefined){ item.description = " ";}
        if (item.price === undefined){ item.price = "";}
        nachweisArray.push(item);
      }
      console.log(nachweisArray);
      return nachweisArray;
    }

    /**
    */
    function getCarnetFromRows(chosen)
    {
      let rows = getAllMarkedRows(chosen)

      let carnetArray = []
      // prepare data for Carnet export:
      for (i of rows)
      {
        console.log(dataObject[i]);
        let item = {}
        Object.assign(item, {
          description:dataObject[i].name,
          count : dataObject[i].other.count,
          origin : dataObject[i].other.madein,
          price : dataObject[i].other.value,
          weight : dataObject[i].other.weight,
        });
        if (item.count === undefined){ item.count = "1";}
        if (item.origin === undefined){ item.origin = "";}
        if (item.price === undefined){ item.price = "";}
        if (item.weight === undefined){ item.weight = "";}
        carnetArray.push(item);
      }
      console.log(carnetArray);
      let carnetArrayNumbered = numberItems(carnetArray);
      console.log(carnetArrayNumbered);

      return carnetArrayNumbered;
    }

    /**
    renders CarnetATA from tableview as CSV using renderCSV()
    */
    function renderCarnetATAcsv(array)
    {
      let header = ["no","description","count","weight","price","origin"]
      renderCSV(header,array,"carnetATA.csv")
    }

    /**
    */
    function renderCarnetATAexcel(array)
    {
      let header = ["count","description","no","origin","price","weight"]
      console.log(objToArray(array));
      array = objToArray(array);
      array.unshift(header)
      renderAndDownloadExcel(array,[5,30,3,8,8,8])
    }


    /**
    only flat objects. so need to dotize first.
    */
    function objToArray(input,fillEmptyFields=false,dotizeObjects=false){

      let output;

      if (fillEmptyFields){
        // first: get all keys used in this array of objects
        let keys = []
        input.forEach(function(obj) {
          // add keys to collection of keys
          Object.keys(obj).forEach((key)=>{
            addToArrayIfNotExist(keys,key)
          });
          //console.log(keys);
          // second: assign every key as header line of an array of arrays:
          output = [keys]
          console.log(output);
        })
        /* third: iterate throug input array of objects and fill the columns
        of the output array of array accordingly:*/
        let rows = input.map(function(obj){
            //console.log(obj);
            out = output[0].map((key)=>{
              //console.log(key);
              return obj[key]
            })
            console.log(out);
            return out
          })
        console.log(rows);
        output = output.concat(rows)
        return output;

      }
      else {

        output = input.map(function(obj) {

          if(dotizeObjects)
          {
            obj = dotize.convert(obj)
          }

          return Object.keys(obj).sort().map(function(key) {
            return obj[key];
          });
        });

        return output
      }

    }


    /**
    */
    function renderCSV(header,array,filename="download.csv",inputIsArrayOfArrays=false)
    {
      let output = "";
      output += header + "\n";
      if (!inputIsArrayOfArrays)
      {
        for (i in array){
          for (j in header)
          {
            output += array[i][header[j]]+","
          }
          output = output.slice(0,-1)
          output += "\n"
        }
      }
      else {
        for (i in array){
          for (j in array[i])
          {
            output += array[i][j]+","
          }
          output = output.slice(0,-1)
          output += "\n"
        }
      }

      console.log(output);
      var a         = document.createElement('a');
      a.download    = filename;
      a.href        = 'data:attachment/csv,' +  encodeURIComponent(output);
      a.target      = '_blank';

      document.body.appendChild(a);
      a.click();
    }

    /**
    */
    function addOwners2DocIfNoOwners(doc)
    {
      if (!doc.owners)
      {
          doc.owners = [glb_username]
      }
      return doc
    }



    /**
    saves changes in table row by row to the database. <br>
    uses from handsontable change event to find rows that have been updated, checks
    if _id provided. Adds as new item if not, updates if provided.

    @param {object} change - change object from handsontable
    */
    function saveChangesToServer(change)
    {
      return new Promise(function(resolve, reject) {


        console.log(change);
        console.log("saving to server from changes");
        let updatedRowNums = [];
        for (i in change)
        {
          //console.log(change[i]);
          addToArrayIfNotExist(updatedRowNums,change[i][0])
        }
        console.log("updateing rows: "+updatedRowNums);
        // now update all the items on their own:
        let updPromises = [];

        for (num of updatedRowNums){
          console.log(`updating row #${num}`);
          let item2Upd = JSON.parse(JSON.stringify(dataObject[num]));
          if (!item2Upd._id || item2Upd._id === undefined || item2Upd._id === ""){
            console.log("adding new ITEM");
            item2Upd = addOwners2DocIfNoOwners(item2Upd);

            addNewItemFromTable(item2Upd,num,function(r){resolve(r)})
          }
          else{
            item2Upd = convertItemToItemWithArrays(item2Upd);
            console.log(item2Upd);
            updateOverwrite(item2Upd,function(res){
              console.log(res);
              if (res.ok)
              {
                dataObject[num]._rev = res.rev
                resolve(res.rev)
              }
              else {
                if(res.status.toString().startsWith("409")) { console.log("conflict"); }
                else if(res.status.toString().startsWith("500")) { console.log("server error"); }
                else if(res.status.toString().startsWith("4")) { console.log("other error"); }
                alert("item with _id: "+item2Upd._id+"\n("+item2Upd.name+")\ncould not be updated.");
                console.log(res);
                reject("item with _id: "+item2Upd._id+"\n("+item2Upd.name+")\ncould not be updated.")
              }
            });
          }

        }



      })

    }

    /**
    helper function for tableview. Splits some fields of an object and turns
    lists of strings with commas into arrays of strings by splitting the strings
    at the commas
    */
    function convertItemToItemWithArrays(item2Upd)
    {
      if (item2Upd.owners && !Array.isArray(item2Upd.owners)){ item2Upd.owners = item2Upd.owners.replace(' ', '').split(",") }
      if (item2Upd.other && item2Upd.other.tags && !Array.isArray(item2Upd.other.tags)){item2Upd.other.tags = item2Upd.other.tags.split(",");}
      //if (!Array.isArray(item2Upd.visibility)){ item2Upd.visibility = item2Upd.visibility.replace(' ', '').split(",") }
      return item2Upd
    }

    /**
    */
    function addNewItemFromTable(item2Upd,rowNum,cb=console.log)
    {
      if (!(item2Upd.name && item2Upd.owners && item2Upd.location &&
          (item2Upd.location.address || item2Upd.location.latitude ||
          item2Upd.location.description)))
      {
        console.log("not adding cause sth missing");
        return
      }
      console.log("adding it");
      if (item2Upd.other){
        item2Upd.other.visibility = ["friends"];
      }
      else {
        item2Upd.other = { visibility : ["friends"] }
      }

      //return
      addit(item2Upd,function(res){
        console.log(res);
        if (res.ok)
        {
          getSingleItem(res.id,function(res2){
            dataObject[rowNum] = res2;
            hot.render();
            cb("done")
          }), function(err){
            throw err
          }
        }
        else {
          throw res
        }
      })

    }

    /**
    */
    function filltable(data,clearTable=true){
      if(clearTable)
      {
        dataObject = data;
      }
      else {
        dataObject = dataObject.concat(data)
      }
      hot.loadData(dataObject); // fill it into table
    }

    /**
    */
    function addToArrayIfNotExist(array,item){
      array.indexOf(item) === -1 ? array.push(item) : null/*console.log("item already exists")*/;
      return array;
    }

    /**
    */
    function moveInsideArray( array, originalIndex, newIndex ) {
      if ( newIndex >= array.length ) {
          var i = newIndex - array.length + 1;
          while (i--) {
              array.push( undefined );
          }
      }
      array.splice( newIndex, 0, array.splice( originalIndex, 1 )[0] );
    };

/* // exists inside addNew.mustache
    function addit(obj,callback=console.log)
    {
      let data = {
                "data":[{
                  "type":"addItems",
                  "doc":obj,
                }]
              };

      console.log("attempting to add item to dingsda");
      postAPI({
          path:glb_username,
          data:data,
           callback: function(result){
            callback(result)
          }

      });

    }
*/

    /**
    */
    function updateOverwrite(obj,callback=console.log,error=console.log)
    {
      if (!obj._id){return error("no _id provided")}
      console.log("trying to fetch originalObject from DB");
      console.log(obj);

      let path = API_BASE_URL+glb_username+"/"+obj._id;
      if (obj.hyperlink !== undefined && obj.hyperlink != "")
      { path = obj.hyperlink }

      getSingleItem(path, function(res){
          console.log("old and new obj:");
          console.log(res);
          //console.log("merging oldObj and formContents");
          let newObj = Object.assign({}, res, obj);
          /*
          in order to overwrite _rev in case in the time in between sb updated
          that item (not optimal but okay).
          */
          newObj._rev = res._rev;
          console.log(newObj);
          //console.log("attempting update of object");

          let newdata = {
              "data":[{
                "type":"update",
                "doc":newObj,
                //pic:document.getElementById("preview_photo").src
                //"doc":{_id:"33","other.visibility":["friends"]}
              }]
            }
            let reloadAfterUpdate = false;
            // photo upload:
            /*if (document.getElementById("addPhoto").src.startsWith("data:image/jpeg;base64") )
            {
              console.log("PIC added to newdata!!!");
              newdata.data[0].pic = document.getElementById("addPhoto").src;

            }*/
            //console.log(newdata);
            // write into DB
            $.ajax({
              type: "POST",
              url: path,
              data: JSON.stringify(newdata),
              success: function(res){
                callback(res)
              },
              xhrFields: { withCredentials: true }, // to make AuthCookie ok
              error: error,
              contentType:"application/json"
            });
        },
        function(err){callback(err)}
      )

    }
/* exists already inside addNew.mustache
    function postAPI({path="", data =null, callback=console.log,
                      error=function(err)
                      {;
                      console.log(err.responseText);
                      callback(err)
                    }})
    {

      $.ajax({
        type: "POST",
        url: API_BASE_URL+path,
        data: JSON.stringify(data),
        success: callback,
        xhrFields: { withCredentials: true }, // to make AuthCookie ok
        error: error
        ,contentType:"application/json"
      });

    }
*/
/* //exists already inside itemDetails.mustache
    function getSingleItem(id,callback,error=console.log)
    {
        // transform id into hyperlink in case no hyperlink was passed:
        if (!id.startsWith("https")){
          id = API_BASE_URL+glb_username+"/"+id;
        }
        console.log("fetching single Item: "+id);
        // get item json from DB
        $.ajax({
          type: "GET",
          url: id,
          success: callback,
          xhrFields: { withCredentials: true }, // to make AuthCookie ok
          error: error,
          contentType:"application/json"
        });

    }
*/
/** // exists inside collection.mustache
    function removeit(id, callbackdel=console.log)
    {
      console.log("removeit function triggered!!!");
      if (id == "" || id == undefined)
      {
        return
      }

      console.log("trying to fetch originalObject from DB");

      getAPI({
        path:glb_username+"/"+id,
        data:{
          "data":[{
            "type":"fetch"
          }]
        },
        callback: function(res){

          console.log(res);
          console.log("attempting DELETE of object");

          let deletedata = {
              "data":[{
                "type":"deleteItems",
                "doc":res,
              }]
            }

          postAPI({
              path:glb_username+"/"+id,
              data:deletedata,
                callback: function(result){
                callbackdel(result)
                console.log("DELETED "+id+" successfully");
                console.log(result);
              },
              error: function(err){
                console.log("error in deleteit delete");
                callbackdel(err)
              }

          });
        },
        error: function(err){
          console.log("error in deleteit prefetch");
          callbackdel(err)
        }
      })

    }
*/
/* exists inside addNew.mustache
    function getAPI({path="", data=null, callback=console.log, error=function(err)
                      {console.log(err.responseText)}})
    {

      $.ajax({
        type: "GET",
        url: API_BASE_URL+path,
        data: data,
        success: callback,
        xhrFields: { withCredentials: true }, // to make AuthCookie ok
        error: error
        //,dataType: "application/json"
        ,contentType:"application/json"
      });

    }
*/

    /**
    */
    function renderAndDownloadExcel( ws_data = [['empty','data']],
          columnwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
         )
    {
      let wb = XLSX.utils.book_new();
      wb.SheetNames.push("1");
      let ws = XLSX.utils.aoa_to_sheet(ws_data);

      // sets the width of the cols
      let wscols = [];
      for (i in columnwidths)
      {
        wscols.push({wch:columnwidths[i]})
      }
      ws['!cols'] = wscols;

      wb.Sheets["1"] = ws;
      let out = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});

      saveAs(new Blob([makeSpreadSheetBuffer(out)],{type:"application/octet-stream"}), 'test.xlsx');
    }

    /**
    */
    function makeSpreadSheetBuffer(inp)
    {
        let buffer = new ArrayBuffer(inp.length);
        let UintArray = new Uint8Array(buffer);
        for (var i = 0; i < inp.length; i++) UintArray[i] = inp.charCodeAt(i) & 0xFF;
        return buffer;
    }

    /**
    helper function. checking if running on desktop browser or mobile device
    */
    function isOnMobile() {

      let isMobile = false;
      (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
      .test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
      return isMobile;
    }


</script>
